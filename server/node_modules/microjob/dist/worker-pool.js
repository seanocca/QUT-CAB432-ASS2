"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-ignore
const worker_threads_1 = require("worker_threads");
const os_1 = __importDefault(require("os"));
const events_1 = __importDefault(require("events"));
const WORKER_STATE_READY = 'ready';
const WORKER_STATE_BUSY = 'busy';
const WORKER_POOL_STATE_ON = 'on';
const WORKER_POOL_STATE_OFF = 'off';
class WorkerPool extends events_1.default {
    constructor(maxWorkers) {
        super();
        this.maxWorkers = maxWorkers;
        this.taskQueue = [];
        this.workers = [];
        this.state = WORKER_POOL_STATE_ON;
        this.setup();
    }
    tick() {
        if (this.taskQueue.length === 0)
            return;
        let availableWorker;
        for (let i = 0; i < this.workers.length; i++) {
            if (this.workers[i].status === WORKER_STATE_READY) {
                availableWorker = this.workers[i];
                break;
            }
        }
        if (typeof availableWorker === 'undefined')
            return;
        const work = this.taskQueue.shift();
        availableWorker.status = WORKER_STATE_BUSY;
        const { worker } = availableWorker;
        this.emit('tick', { work, worker });
    }
    enqueue({ handler, config, resolve, reject }) {
        this.taskQueue.push({ handler, config, resolve, reject });
        this.tick();
    }
    free(worker) {
        for (let i = 0; i < this.workers.length; i++) {
            // @ts-ignore
            if (worker.threadId === this.workers[i].worker.threadId) {
                this.workers[i].status = WORKER_STATE_READY;
                // remove previous listeners
                // @ts-ignore
                this.workers[i].worker.removeAllListeners();
                this.tick();
                break;
            }
        }
    }
    setup() {
        for (let i = 0; i < this.maxWorkers; i++) {
            const worker = new worker_threads_1.Worker(`${__dirname}/worker.js`);
            worker.once('online', () => {
                // next tick, so the worker js gets interpreted
                process.nextTick(() => {
                    this.workers.push({
                        status: WORKER_STATE_READY,
                        worker
                    });
                    // remove previous listeners, like the startup error handler
                    worker.removeAllListeners();
                    // if teardown has been called during the setup procedure, repeat it to flush the worker buffer
                    if (this.state === WORKER_POOL_STATE_OFF)
                        return this.teardown();
                    this.tick();
                });
            });
            // startup error handler: should not be thrown or at least handled
            worker.once('error', (error) => {
                throw error;
            });
        }
    }
    teardown() {
        for (let i = 0; i < this.workers.length; i++) {
            // @ts-ignore
            this.workers[i].worker.terminate();
        }
        this.state = WORKER_POOL_STATE_OFF;
        this.workers = [];
    }
}
exports.default = new WorkerPool(parseInt(process.env.MAX_WORKERS) || os_1.default.cpus().length);
