const fs = require('fs');
const { NlpUtil } = require('../../lib');
const BinaryNeuralNetworkClassifier = require('../../lib/classifiers/binary-neural-network-classifier');
const AskUbuntuCorpus = require('./AskUbuntuCorpus.json');
const ChatbotCorpus = require('./ChatbotCorpus.json');
const WebApplicationCorpus = require('./WebApplicationCorpus.json');

NlpUtil.useAlternative.en = true;
const stemmer = NlpUtil.getStemmer('en');

function buildDomain(corpus) {
  return corpus.sentences.map(sentence => {
    return {
      text: sentence.text,
      intent: sentence.intent,
      training: sentence.training,
      tokens: [...new Set(stemmer.tokenizeAndStem(sentence.text))],
    }
  });
}

function objetize(tokens) {
  const result = {};
  tokens.forEach(token => {
    result[token] = 1;
  });
  return result;
}

function featurizeObj(tokens, features) {
  const tokensObj = objetize(tokens);
  const result = {};
  for (let i = 0; i < features.length; i += 1) {
    if (tokensObj[features[i]] === 1) {
      result[features[i]] = 1;
    }
  }
  return result;
}

function calculateFeatures(domain) {
  const features = {};
  domain.forEach(sentence => {
    sentence.tokens.forEach(token => {
      features[token] = 1;
    });
  });
  return Object.keys(features);
}

function train(classifier, corpus) {
  const features = calculateFeatures(corpus);
  const batch = [];
  corpus.forEach(sentence => {
    const item = {
      input: featurizeObj(sentence.tokens, features),
      output: sentence.intent,
    }
    if (sentence.training) {
      batch.push(item);
    }
  });
  console.log(batch);
  classifier.trainBatch(batch);
}

function test(classifier, corpus) {
  const meh = [];
  let total = 0;
  let correct = 0;
  const features = calculateFeatures(corpus);
  corpus.forEach(sentence => {
    const item = {
      input: featurizeObj(sentence.tokens, features),
      output: sentence.intent,
    }
    if (!sentence.training) {
      total += 1;
      let classification = classifier.classify(item.input, true);
      const actual = classification[0].label;
      meh.push({
        utterance: sentence.text,
        expected: sentence.intent,
        actualNeu: actual,
        classificationNeu: classification
      })
      if (actual === sentence.intent) {
        correct += 1;
      }
    }
  });
  return { correct, total, meh };
}

console.time('Train + classify');
console.time('lisensiado 01');
const classifierUbuntu = new BinaryNeuralNetworkClassifier();
const domainAskUbuntu = buildDomain(AskUbuntuCorpus);
train(classifierUbuntu, domainAskUbuntu);
console.timeEnd('lisensiado 01');
const resultAskUbuntu = test(classifierUbuntu, domainAskUbuntu);

console.time('lisensiado 02');
const classifierChatbot = new BinaryNeuralNetworkClassifier();
const domainChatbot = buildDomain(ChatbotCorpus);
train(classifierChatbot, domainChatbot);
console.timeEnd('lisensiado 02');
const resultChatbot = test(classifierChatbot, domainChatbot);

console.time('lisensiado 03');
const classifierWebApplication = new BinaryNeuralNetworkClassifier();
const domainWebApplication = buildDomain(WebApplicationCorpus);
train(classifierWebApplication, domainWebApplication);
console.timeEnd('lisensiado 03');
const resultWebApplication = test(classifierWebApplication, domainWebApplication);
console.timeEnd('Train + classify');

console.log(
  `Chatbot ${resultChatbot.correct} / ${resultChatbot.total} = ${(
    resultChatbot.correct / resultChatbot.total
  ).toFixed(2)}`
);
console.log(
  `Ask Ubuntu ${resultAskUbuntu.correct} / ${resultAskUbuntu.total} = ${(
    resultAskUbuntu.correct / resultAskUbuntu.total
  ).toFixed(2)}`
);
console.log(
  `Web Application ${resultWebApplication.correct} / ${
    resultWebApplication.total
  } = ${(resultWebApplication.correct / resultWebApplication.total).toFixed(
    2
  )}`
);
const total =
resultAskUbuntu.total + resultChatbot.total + resultWebApplication.total;
const correct =
resultAskUbuntu.correct +
  resultChatbot.correct +
  resultWebApplication.correct;
console.log(`Global Score: ${(correct / total).toFixed(2)}`);
const meh = {
  chatbot: resultChatbot.meh,
  askUbuntu: resultAskUbuntu.meh,
  webApplication: resultWebApplication.meh
}
fs.writeFileSync('./meh.json', JSON.stringify(meh, null, 2), 'utf8');